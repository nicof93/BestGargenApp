package com.blackrobot.bestgarden;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.blackrobot.bestgarden.Aplicacion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APLICACION.
*/
public class AplicacionDao extends AbstractDao<Aplicacion, Long> {

    public static final String TABLENAME = "APLICACION";

    /**
     * Properties of entity Aplicacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Zid_aplicacion = new Property(1, int.class, "zid_aplicacion", false, "ZID_APLICACION");
        public final static Property Zepoca_anual = new Property(2, String.class, "zepoca_anual", false, "ZEPOCA_ANUAL");
        public final static Property Zdosificacion = new Property(3, String.class, "zdosificacion", false, "ZDOSIFICACION");
        public final static Property Zfrecuencia = new Property(4, String.class, "zfrecuencia", false, "ZFRECUENCIA");
        public final static Property Zetapa = new Property(5, String.class, "zetapa", false, "ZETAPA");
        public final static Property Zid_planta = new Property(6, Integer.class, "zid_planta", false, "ZID_PLANTA");
        public final static Property Zid_plaga = new Property(7, Integer.class, "zid_plaga", false, "ZID_PLAGA");
        public final static Property Zid_producto = new Property(8, Integer.class, "zid_producto", false, "ZID_PRODUCTO");
    };


    public AplicacionDao(DaoConfig config) {
        super(config);
    }
    
    public AplicacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APLICACION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ZID_APLICACION' INTEGER NOT NULL ," + // 1: zid_aplicacion
                "'ZEPOCA_ANUAL' TEXT," + // 2: zepoca_anual
                "'ZDOSIFICACION' TEXT," + // 3: zdosificacion
                "'ZFRECUENCIA' TEXT," + // 4: zfrecuencia
                "'ZETAPA' TEXT," + // 5: zetapa
                "'ZID_PLANTA' INTEGER," + // 6: zid_planta
                "'ZID_PLAGA' INTEGER," + // 7: zid_plaga
                "'ZID_PRODUCTO' INTEGER);"); // 8: zid_producto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APLICACION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Aplicacion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getZid_aplicacion());
 
        String zepoca_anual = entity.getZepoca_anual();
        if (zepoca_anual != null) {
            stmt.bindString(3, zepoca_anual);
        }
 
        String zdosificacion = entity.getZdosificacion();
        if (zdosificacion != null) {
            stmt.bindString(4, zdosificacion);
        }
 
        String zfrecuencia = entity.getZfrecuencia();
        if (zfrecuencia != null) {
            stmt.bindString(5, zfrecuencia);
        }
 
        String zetapa = entity.getZetapa();
        if (zetapa != null) {
            stmt.bindString(6, zetapa);
        }
 
        Integer zid_planta = entity.getZid_planta();
        if (zid_planta != null) {
            stmt.bindLong(7, zid_planta);
        }
 
        Integer zid_plaga = entity.getZid_plaga();
        if (zid_plaga != null) {
            stmt.bindLong(8, zid_plaga);
        }
 
        Integer zid_producto = entity.getZid_producto();
        if (zid_producto != null) {
            stmt.bindLong(9, zid_producto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Aplicacion readEntity(Cursor cursor, int offset) {
        Aplicacion entity = new Aplicacion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // zid_aplicacion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zepoca_anual
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zdosificacion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zfrecuencia
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zetapa
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // zid_planta
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // zid_plaga
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // zid_producto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Aplicacion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZid_aplicacion(cursor.getInt(offset + 1));
        entity.setZepoca_anual(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZdosificacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZfrecuencia(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZetapa(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZid_planta(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setZid_plaga(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setZid_producto(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Aplicacion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Aplicacion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

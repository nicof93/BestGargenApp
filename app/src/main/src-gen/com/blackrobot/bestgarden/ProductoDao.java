package com.blackrobot.bestgarden;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.blackrobot.bestgarden.Producto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCTO.
*/
public class ProductoDao extends AbstractDao<Producto, Long> {

    public static final String TABLENAME = "PRODUCTO";

    /**
     * Properties of entity Producto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Zid_producto = new Property(1, int.class, "zid_producto", false, "ZID_PRODUCTO");
        public final static Property Znombre = new Property(2, String.class, "znombre", false, "ZNOMBRE");
        public final static Property Zobjetivo = new Property(3, String.class, "zobjetivo", false, "ZOBJETIVO");
        public final static Property Ztipo = new Property(4, String.class, "ztipo", false, "ZTIPO");
        public final static Property Zlink = new Property(5, String.class, "zlink", false, "ZLINK");
    };


    public ProductoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ZID_PRODUCTO' INTEGER NOT NULL ," + // 1: zid_producto
                "'ZNOMBRE' TEXT," + // 2: znombre
                "'ZOBJETIVO' TEXT," + // 3: zobjetivo
                "'ZTIPO' TEXT," + // 4: ztipo
                "'ZLINK' TEXT);"); // 5: zlink
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getZid_producto());
 
        String znombre = entity.getZnombre();
        if (znombre != null) {
            stmt.bindString(3, znombre);
        }
 
        String zobjetivo = entity.getZobjetivo();
        if (zobjetivo != null) {
            stmt.bindString(4, zobjetivo);
        }
 
        String ztipo = entity.getZtipo();
        if (ztipo != null) {
            stmt.bindString(5, ztipo);
        }
 
        String zlink = entity.getZlink();
        if (zlink != null) {
            stmt.bindString(6, zlink);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Producto readEntity(Cursor cursor, int offset) {
        Producto entity = new Producto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // zid_producto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // znombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zobjetivo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ztipo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // zlink
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Producto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZid_producto(cursor.getInt(offset + 1));
        entity.setZnombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZobjetivo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZtipo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZlink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Producto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Producto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
